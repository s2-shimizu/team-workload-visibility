# AWS Lambda設定テンプレート
# Team Dashboard Backend Lambda Function Configuration

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Team Dashboard Backend - Lambda Function Configuration Template'

# パラメータ定義
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: 'デプロイメント環境 (dev/staging/prod)'
    
  FunctionName:
    Type: String
    Default: team-dashboard-api
    Description: 'Lambda関数名のベース名'
    
  MemorySize:
    Type: Number
    Default: 1024
    MinValue: 128
    MaxValue: 10240
    Description: 'Lambda関数のメモリサイズ (MB)'
    
  Timeout:
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 900
    Description: 'Lambda関数のタイムアウト (秒)'
    
  JavaRuntime:
    Type: String
    Default: java17
    AllowedValues: [java11, java17, java21]
    Description: 'Java実行環境バージョン'
    
  LogRetentionDays:
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: 'CloudWatchログの保持期間 (日)'

# グローバル設定
Globals:
  Function:
    Runtime: !Ref JavaRuntime
    MemorySize: !Ref MemorySize
    Timeout: !Ref Timeout
    Environment:
      Variables:
        # Spring Boot設定
        SPRING_PROFILES_ACTIVE: !Sub 'lambda,dynamodb,${Environment}'
        
        # JVM最適化設定
        JAVA_TOOL_OPTIONS: >-
          -XX:+TieredCompilation 
          -XX:TieredStopAtLevel=1 
          -Djava.awt.headless=true
          -Dspring.main.lazy-initialization=true
          -Dspring.jmx.enabled=false
        
        # AWS設定
        AWS_REGION: !Ref AWS::Region
        
        # ログ設定
        LOG_LEVEL: !If [IsProd, 'WARN', 'INFO']
        LOG_FORMAT: 'JSON'
        
        # セキュリティ設定
        JWT_EXPIRATION: '86400'
        CORS_ALLOWED_ORIGINS: !If [IsProd, 'https://yourdomain.com', '*']

# 条件定義
Conditions:
  IsProd: !Equals [!Ref Environment, 'prod']
  IsStaging: !Equals [!Ref Environment, 'staging']
  IsDev: !Equals [!Ref Environment, 'dev']

# リソース定義
Resources:
  # Lambda関数
  TeamDashboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${FunctionName}-${Environment}'
      CodeUri: backend/target/
      Handler: com.teamdashboard.LambdaHandler::handleRequest
      Description: !Sub 'Team Dashboard API Lambda function for ${Environment} environment'
      
      # パフォーマンス設定
      ReservedConcurrencyLimit: !If [IsProd, 100, 10]
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrencyEnabled: !If [IsProd, true, false]
        ProvisionedConcurrency: !If [IsProd, 5, 0]
      
      # 環境変数
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref TeamDashboardTable
          API_GATEWAY_STAGE: !Ref Environment
          ENVIRONMENT: !Ref Environment
          
          # 環境別設定
          JWT_SECRET: !If 
            - IsProd
            - !Sub '{{resolve:ssm-secure:/team-dashboard/prod/jwt-secret}}'
            - !Sub '{{resolve:ssm-secure:/team-dashboard/${Environment}/jwt-secret}}'
      
      # デッドレターキュー設定
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeadLetterQueue.Arn
      
      # トレーシング設定
      Tracing: Active
      
      # VPC設定（必要に応じて）
      # VpcConfig:
      #   SecurityGroupIds:
      #     - !Ref LambdaSecurityGroup
      #   SubnetIds:
      #     - !Ref PrivateSubnet1
      #     - !Ref PrivateSubnet2
      
      # イベント設定
      Events:
        # API Gateway統合
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref TeamDashboardApi
        RootApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref TeamDashboardApi
        
        # CloudWatch Events（ヘルスチェック用）
        HealthCheckEvent:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Input: '{"httpMethod": "GET", "path": "/health"}'
      
      # IAMロール設定
      Policies:
        # DynamoDB アクセス権限
        - DynamoDBCrudPolicy:
            TableName: !Ref TeamDashboardTable
        
        # CloudWatch Logs権限
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}-${Environment}:*'
        
        # X-Ray トレーシング権限
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
              Resource: '*'
        
        # Systems Manager Parameter Store権限
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:GetParametersByPath
              Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/team-dashboard/${Environment}/*'
        
        # SQS（デッドレターキュー）権限
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt DeadLetterQueue.Arn

  # CloudWatch Logs グループ
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FunctionName}-${Environment}'
      RetentionInDays: !Ref LogRetentionDays

  # デッドレターキュー
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${FunctionName}-${Environment}-dlq'
      MessageRetentionPeriod: 1209600  # 14日
      VisibilityTimeoutSeconds: 60

  # Lambda関数エイリアス
  LambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref TeamDashboardFunction
      FunctionVersion: !GetAtt TeamDashboardFunction.Version
      Name: !Ref Environment
      Description: !Sub 'Alias for ${Environment} environment'

  # Lambda関数バージョン（自動更新）
  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref TeamDashboardFunction
      Description: !Sub 'Version for ${Environment} deployment'

  # CloudWatch アラーム
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${FunctionName}-${Environment}-errors'
      AlarmDescription: 'Lambda function error rate alarm'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref TeamDashboardFunction
      AlarmActions:
        - !Ref SNSAlarmTopic

  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${FunctionName}-${Environment}-duration'
      AlarmDescription: 'Lambda function duration alarm'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 25000  # 25秒
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref TeamDashboardFunction
      AlarmActions:
        - !Ref SNSAlarmTopic

  # SNS アラーム通知トピック
  SNSAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${FunctionName}-${Environment}-alarms'
      DisplayName: !Sub 'Team Dashboard ${Environment} Alarms'

  # DynamoDB テーブル（参照用）
  TeamDashboardTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'TeamDashboard-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      
      # バックアップ設定
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProd, true, false]
      
      # 暗号化設定
      SSESpecification:
        SSEEnabled: true
        KMSMasterKeyId: alias/aws/dynamodb
      
      # タグ設定
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: TeamDashboard
        - Key: Component
          Value: Database

  # API Gateway（参照用）
  TeamDashboardApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${FunctionName}-${Environment}'
      StageName: !Ref Environment
      
      # CORS設定
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'"
        AllowOrigin: !If [IsProd, "'https://yourdomain.com'", "'*'"]
        AllowCredentials: true
        MaxAge: "'600'"
      
      # API Gateway設定
      EndpointConfiguration:
        Type: REGIONAL
      
      # ログ設定
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: >
          {
            "requestId": "$context.requestId",
            "ip": "$context.identity.sourceIp",
            "caller": "$context.identity.caller",
            "user": "$context.identity.user",
            "requestTime": "$context.requestTime",
            "httpMethod": "$context.httpMethod",
            "resourcePath": "$context.resourcePath",
            "status": "$context.status",
            "protocol": "$context.protocol",
            "responseLength": "$context.responseLength",
            "responseTime": "$context.responseTime",
            "error": "$context.error.message",
            "integrationError": "$context.integration.error"
          }
      
      # スロットリング設定
      ThrottleConfig:
        BurstLimit: !If [IsProd, 5000, 200]
        RateLimit: !If [IsProd, 2000, 100]

  # API Gateway CloudWatch Logs
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${FunctionName}-${Environment}'
      RetentionInDays: !Ref LogRetentionDays

# 出力値
Outputs:
  LambdaFunctionName:
    Description: 'Lambda function name'
    Value: !Ref TeamDashboardFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'
  
  LambdaFunctionArn:
    Description: 'Lambda function ARN'
    Value: !GetAtt TeamDashboardFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'
  
  LambdaAliasArn:
    Description: 'Lambda alias ARN'
    Value: !Ref LambdaAlias
    Export:
      Name: !Sub '${AWS::StackName}-LambdaAlias'
  
  ApiGatewayEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${TeamDashboardApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'
  
  DynamoDBTableName:
    Description: 'DynamoDB table name'
    Value: !Ref TeamDashboardTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTable'
  
  DeadLetterQueueUrl:
    Description: 'Dead letter queue URL'
    Value: !Ref DeadLetterQueue
    Export:
      Name: !Sub '${AWS::StackName}-DeadLetterQueue'
  
  SNSAlarmTopicArn:
    Description: 'SNS alarm topic ARN'
    Value: !Ref SNSAlarmTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSAlarmTopic'